/*
 * File:   main.c
 * Author: Luz Galindo
 *
 * Created on 14 de abril de 2023, 09:28 AM
 */
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

#include <xc.h>
#include <stdio.h>

#define _XTAL_FREQ 1000000

void cadena(char txt[]); // Declaración de la función "cadena"
void leerPotenciometro(void);
void enviarAscii(void);

void setup(void);

void __interrupt() isr(void){
    if(PIR1bits.RCIF)
    {
        char opcion = RCREG;
        switch(opcion) {
            case '1':
                leerPotenciometro();
                break;
            case '2':
                enviarAscii();
                break;
            default:
                cadena("Opcion invalida\r");
                while(RCREG != 13); // Esperar hasta que se presione Enter
        }
    }
}


void main(void){
    setup();

    while (1){
        cadena("Seleccione una opcion:\r1. Leer Potenciometro\r2. Enviar Ascii\r");
        __delay_ms(3000); //5 segundos
    }
}



void cadena(char txt[]){
    int i = 0;
    while(txt[i] != '\0'){
        while(!TXSTAbits.TRMT); // Esperamos a que el registro de transmisión esté vacío
        TXREG = txt[i]; // Enviamos el caracter actual
        i++;
    }
}

void leerPotenciometro(void) {
    ADCON0bits.ADON = 1; // Encendemos el módulo de ADC
    ADCON0bits.CHS = 0b0000; // Seleccionamos el canal 0 (AN0)
    ADCON0bits.GO = 1; // Iniciamos la conversión
    while(ADCON0bits.GO); // Esperamos a que la conversión termine
    int valor = ADRESH; // Leemos el byte alto del resultado
    cadena("Valor del potenciometro: \r");
    char buffer[4];
    sprintf(buffer, "%d\r", valor); // Convertimos el valor a string y lo enviamos por la hiperterminal
    cadena(buffer);
    ADCON0bits.ADON = 0; // Apagamos el módulo de ADC
}



void enviarAscii(void) {
    cadena("Escriba un caracter para enviar: \r");
    while(!PIR1bits.RCIF); // Esperamos a que se reciba un caracter
    char dato = RCREG;
    TXREG = dato; // Escribimos el caracter recibido para mostrarlo en la Hiperterminal
    cadena("  \r"); //Un espacio de salto de linea
    PORTB = dato; // Mostramos el carácter en el puerto B como una representación en ASCII utilizando 8 LEDs
}



void setup(void){
    
    ANSEL = 0b00000001; // Habilitamos el pin AN0 para el ADC
    ANSELH = 0; 
    
    TRISB = 0;
    PORTB =  0x00;
    
    OSCCONbits.IRCF = 0b100;
    OSCCONbits.SCS = 1;
    
    //Configuracion de TX y RX
    TXSTAbits.SYNC = 0;
    TXSTAbits.BRGH = 1;
    
    BAUDCTLbits.BRG16 = 1;
    
    SPBRG = 25;
    SPBRGH = 0;
    
    RCSTAbits.SPEN = 1;
    RCSTAbits.RX9 = 0;        
    RCSTAbits.CREN = 1;
    
    TXSTAbits.TXEN = 1; //Habilitamos la transmision
    
    PIR1bits.RCIF = 0;
    PIE1bits.RCIE = 1;
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;
}
